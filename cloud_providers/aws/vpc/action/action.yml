name: 'juju-aws-prod-deploy'
description: 'Sets up an AWS env for Juju with multiple AZs'
inputs:
  region:
    description: 'The AWS region to be used'
    default: 'us-east-1'
  vpc_cidr:
    description: 'The CIDR that will be used by all the VPC subnets'
    default: '192.168.240.0/22'
  tags:
    description: 'Deployment-wide "key: value" tags to be applied to all resources'
    default: |
      CI: true
  public_cidr:
    description: 'Public subnet CIDR'
    default: '192.168.240.0/24'
  private_cidrs:
    description: 'Yaml-formatted map of private CIDRs, each subnet will land on a different AZ'
    default: |
      private_cidr1: 
        cidr: 192.168.241.0/24
        az: us-east-1a
      private_cidr2: 
        cidr: 192.168.242.0/24
        az: us-east-1b
      private_cidr3:
        cidr: 192.168.243.0/24
        az: us-east-1c

  juju_client_channel:
    description: 'The Juju channel to run locally'
    default: '3.6/beta'
  model_name:
    description: 'Juju model name'
    default: "test"

runs:
  using: "composite"
  steps:
    - name: Preamble
      run: |
        sudo apt update
        sudo apt install -y python3-pip
        sudo pip3 install yaml || true
        sudo pip3 install jinja2 || true
        sudo snap install terraform --classic
        sudo snap install juju --channel=${{ inputs.juju_client_channel }} --classic
      shell: bash

    - name: Prepare Arguments
      run: |
          import json
          import yaml
          import os
          import jinja2

          private_cidrs = {
            key: {
              "name": key,
              "cidr": value["cidr"],
              "az": value["az"]
            }
            for key, value in yaml.safe_load(${{ inputs.private_cidrs }}).items()
          }

          public_cidrs = {
            "name": "public_cidr",
            "cidr": ${{ inputs.public_cidr }}
            "az": "{}a".format(${{ inputs.region }}a)
          }

          args = {
            "region": ${{ inputs.region }},
            "vpc_cidr": ${{ inputs.vpc_cidr }},
            "tags": yaml.safe_load(${{ inputs.tags }}),
            "public_cidr": public_cidrs,
            "private_cidrs": private_cidrs,
            "model_name": ${{ inputs.model_name }},
          }

          template_tfvars="""vpc = {
            name   = "test-vpc"
            region = "{{ args['region']  }}"
            cidr   = "{{ args['vpc_cidr'] }}"
          }

          provider_tags = {
          {%- for tag, val in args['tags'].items() %}
            {{ tag }} = "{{ val }}"
          {%- endfor %}
          }

          public_cidr = {
          {%- for key, val in args['public_cidr'].items() %}
            {{ key }} = "{{ val }}"
          {%- endfor %}
          }

          private_cidrs = {
          {%- for subnet_name, subnet in args['private_cidrs'].items() %}
            {{ subnet_name }} = {
              cidr = "{{ subnet['cidr'] }}"
              name = "{{ subnet['name'] }}"
              az = "{{ subnet['az'] }}"
            }
          {%- endfor %}
          }

          model_name = "{{ args['model_name'] }}"
          """
          environment = jinja2.Environment()
          template = environment.from_string(template_tfvars)
          output = template.render(args=args)
          with open("terraform.tfvars", "w") as file:
              file.write(template.render(args=args))
      shell: python

    - id: AWS VPC Setup && Juju Bootstrap
      run: |
        pushd cloud_providers/aws/vpc/setup/
        terraform init
        terraform apply -auto-approve -var-file=../../../terraform.tfvars
        popd
      shell: bash

    - id: Juju Bootstrap
      run: |
        pushd cloud_providers/aws/vpc/bootstrap/
        terraform init
        terraform apply -auto-approve -var-file=../../../terraform.tfvars
        popd
      shell: bash